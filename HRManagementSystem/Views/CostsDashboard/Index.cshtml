@model HRManagementSystem.Models.CostsDashboard.CostsDashboardViewModel
@{
    ViewData["Title"] = "Costs Dashboard";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<!-- Include required CSS -->
<link rel="stylesheet" href="https://cdn.datatables.net/1.11.5/css/dataTables.bootstrap4.min.css">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/select2-bootstrap4-theme@1.0.0/dist/select2-bootstrap4.min.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">

<style>
    body {
        background-color: #f5f6fa;
        font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
    }

    .dashboard-header {
        background: white;
        padding: 20px 30px;
        margin-bottom: 25px;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.08);
    }

    .dashboard-title {
        font-size: 24px;
        font-weight: 600;
        color: #2c3e50;
        margin: 0;
    }

    .generated-date {
        color: #7f8c8d;
        font-size: 13px;
        margin-top: 5px;
    }

    .filter-tabs {
        display: flex;
        gap: 15px;
        margin-bottom: 25px;
        background: white;
        padding: 15px 20px;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.08);
        align-items: center;
    }

        .filter-tabs .form-control, .filter-tabs .select2-container {
            border: 1px solid #e1e8ed;
            border-radius: 6px;
            font-size: 14px;
        }

    .section-card {
        background: white;
        border-radius: 8px;
        padding: 20px;
        margin-bottom: 20px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.08);
    }

    .section-title {
        font-size: 16px;
        font-weight: 600;
        color: #2c3e50;
        margin-bottom: 20px;
        padding: 10px 15px;
        background: linear-gradient(90deg, #3498db 0%, #2980b9 100%);
        color: white;
        border-radius: 6px;
    }

    .summary-section {
        background: #27ae60;
        color: white;
        padding: 10px 15px;
        border-radius: 6px;
        margin-bottom: 20px;
        font-weight: 600;
    }

    .stats-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 15px;
        margin-bottom: 25px;
    }

    .stat-card {
        background: white;
        border-radius: 8px;
        padding: 20px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        transition: transform 0.2s, box-shadow 0.2s;
        border-left: 4px solid;
    }

        .stat-card:hover {
            transform: translateY(-3px);
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        }

        .stat-card.blue {
            border-left-color: #3498db;
        }

        .stat-card.green {
            border-left-color: #27ae60;
        }

        .stat-card.yellow {
            border-left-color: #f39c12;
        }

        .stat-card.orange {
            border-left-color: #e67e22;
        }

        .stat-card.purple {
            border-left-color: #9b59b6;
        }

        .stat-card.red {
            border-left-color: #e74c3c;
        }

    .stat-icon {
        font-size: 28px;
        margin-bottom: 10px;
        opacity: 0.8;
    }

    .stat-card.blue .stat-icon {
        color: #3498db;
    }

    .stat-card.green .stat-icon {
        color: #27ae60;
    }

    .stat-card.yellow .stat-icon {
        color: #f39c12;
    }

    .stat-card.orange .stat-icon {
        color: #e67e22;
    }

    .stat-card.purple .stat-icon {
        color: #9b59b6;
    }

    .stat-card.red .stat-icon {
        color: #e74c3c;
    }

    .stat-value {
        font-size: 32px;
        font-weight: 700;
        margin: 10px 0 5px;
        color: #2c3e50;
    }

    .stat-label {
        font-size: 13px;
        color: #7f8c8d;
        font-weight: 500;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .stat-percentage {
        font-size: 12px;
        color: #95a5a6;
        margin-top: 8px;
    }

    .chart-container {
        background: white;
        border-radius: 8px;
        padding: 20px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.08);
        margin-bottom: 20px;
        height: 400px;
    }

    .table-container {
        background: white;
        border-radius: 8px;
        padding: 20px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.08);
    }

    .data-table {
        font-size: 14px;
    }

        .data-table thead th {
            background: #f8f9fa;
            border-bottom: 2px solid #dee2e6;
            font-weight: 600;
            color: #495057;
            padding: 12px 8px;
        }

        .data-table tbody td {
            padding: 10px 8px;
            vertical-align: middle;
        }

    .badge {
        padding: 4px 8px;
        border-radius: 4px;
        font-size: 11px;
        font-weight: 600;
    }

    .badge-direct {
        background: #d4edda;
        color: #155724;
    }

    .badge-indirect {
        background: #fff3cd;
        color: #856404;
    }

    .progress-bar-custom {
        height: 8px;
        background: #e9ecef;
        border-radius: 4px;
        overflow: hidden;
        margin-top: 5px;
    }

    .progress-fill {
        height: 100%;
        background: linear-gradient(90deg, #3498db, #2ecc71);
        border-radius: 4px;
        transition: width 0.3s ease;
    }

    .health-indicator {
        display: inline-block;
        width: 10px;
        height: 10px;
        border-radius: 50%;
        margin-right: 5px;
    }

    .health-good {
        background: #27ae60;
    }

    .health-warning {
        background: #f39c12;
    }

    .health-bad {
        background: #e74c3c;
    }

    .export-btn {
        background: linear-gradient(90deg, #27ae60, #2ecc71);
        color: white;
        border: none;
        padding: 10px 20px;
        border-radius: 6px;
        font-weight: 600;
        transition: all 0.3s;
    }

        .export-btn:hover {
            background: linear-gradient(90deg, #229954, #27ae60);
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(39, 174, 96, 0.3);
        }

    .loading-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0,0,0,0.5);
        display: none;
        align-items: center;
        justify-content: center;
        z-index: 9999;
    }

    .spinner {
        border: 3px solid #f3f3f3;
        border-top: 3px solid #3498db;
        border-radius: 50%;
        width: 50px;
        height: 50px;
        animation: spin 1s linear infinite;
    }

    @@keyframes spin {
        0%

    {
        transform: rotate(0deg);
    }

    100% {
        transform: rotate(360deg);
    }

    }

    .select2-container--bootstrap4 .select2-selection--multiple {
        min-height: 38px;
        border-radius: 6px;
    }
</style>

<!-- Loading Overlay -->
<div class="loading-overlay" id="loadingOverlay">
    <div class="spinner"></div>
</div>

<!-- Dashboard Header -->
<div class="dashboard-header">
    <h1 class="dashboard-title">Costs Dashboard</h1>
    <div class="generated-date">Generated Date: @DateTime.Now.ToString("yyyy-MM-dd")</div>
</div>

<!-- Filter Tabs -->
<div class="filter-tabs">
    <div style="flex: 1;">
        <label class="mb-1" style="font-size: 13px; font-weight: 600;">Company</label>
        @Html.DropDownListFor(m => m.SelectedCompanyCode, Model.Companies, new { @class = "form-control", id = "companySelect" })
    </div>
    <div style="flex: 1;">
        <label class="mb-1" style="font-size: 13px; font-weight: 600;">Categories</label>
        @Html.ListBoxFor(m => m.SelectedCategories, Model.Categories, new { @class = "form-control", id = "categorySelect", multiple = "multiple" })
    </div>
    <div style="flex: 1;">
        <label class="mb-1" style="font-size: 13px; font-weight: 600;">Start Date</label>
        <input type="date" class="form-control" id="startDate" value="@Model.StartDate.ToString("yyyy-MM-dd")" />
    </div>
    <div style="flex: 1;">
        <label class="mb-1" style="font-size: 13px; font-weight: 600;">End Date</label>
        <input type="date" class="form-control" id="endDate" value="@Model.EndDate.ToString("yyyy-MM-dd")" />
    </div>
    <div style="padding-top: 20px;">
        <button class="export-btn" onclick="exportToExcel()">
            <i class="fas fa-file-excel"></i> Export
        </button>
    </div>
</div>

<!-- Summary Section -->
<div class="summary-section">Summary</div>

<!-- Key Statistics -->
<div class="section-card">
    <div class="section-title">Key Statistics</div>
    <div class="stats-grid">
        <div class="stat-card blue">
            <i class="fas fa-percentage stat-icon"></i>
            <div class="stat-value" id="attendanceRate">@Model.AttendanceSummary.AttendancePercentage%</div>
            <div class="stat-label">Attendance Rate</div>
            <div class="stat-percentage">Present: <span id="presentCount">@Model.AttendanceSummary.PresentCount</span></div>
        </div>

        <div class="stat-card green">
            <i class="fas fa-users stat-icon"></i>
            <div class="stat-value" id="totalEmployees">@Model.Summary.TotalEmployees</div>
            <div class="stat-label">Total Employees</div>
            <div class="stat-percentage">Active workforce</div>
        </div>

        <div class="stat-card yellow">
            <i class="fas fa-rupee-sign stat-icon"></i>
            <div class="stat-value" id="totalCost">@Model.Summary.FormattedTotalCost</div>
            <div class="stat-label">Total Cost</div>
            <div class="stat-percentage">Budget utilization</div>
        </div>

        <div class="stat-card orange">
            <i class="fas fa-chart-line stat-icon"></i>
            <div class="stat-value" id="averageCost">@Model.Summary.FormattedAverageCost</div>
            <div class="stat-label">Average Daily Cost</div>
            <div class="stat-percentage">Per day expense</div>
        </div>

        <div class="stat-card purple">
            <i class="fas fa-calendar-check stat-icon"></i>
            <div class="stat-value" id="presentDays">@Model.Summary.PresentDays</div>
            <div class="stat-label">Present Days</div>
            <div class="stat-percentage">Total working days</div>
        </div>

        <div class="stat-card red">
            <i class="fas fa-user-times stat-icon"></i>
            <div class="stat-value" id="absentCost">@Model.Summary.FormattedAbsentCost</div>
            <div class="stat-label">Absent Cost</div>
            <div class="stat-percentage">Loss due to absence</div>
        </div>
    </div>
</div>

<!-- Charts Row -->
<div class="row">
    <div class="col-md-6">
        <div class="chart-container">
            <div class="section-title">Cost Distribution by Department</div>
            <canvas id="deptCostChart"></canvas>
        </div>
    </div>
    <div class="col-md-6">
        <div class="chart-container">
            <div class="section-title">Direct vs Indirect Costs</div>
            <canvas id="costTypeChart"></canvas>
        </div>
    </div>
</div>

<!-- Department Details -->
<div class="table-container mb-4">
    <div class="section-title">Department Summary</div>
    <table id="departmentTable" class="table table-hover data-table">
        <thead>
            <tr>
                <th>Department</th>
                <th>Cost Type</th>
                <th>Employees</th>
                <th>Present Days</th>
                <th>Absent Days</th>
                <th>Total Cost</th>
                <th>Absent Cost</th>
                <th>% of Total</th>
            </tr>
        </thead>
        <tbody id="departmentTableBody">
            @foreach (var dept in Model.DepartmentCosts)
            {
                <tr>
                    <td>@dept.Department</td>
                    <td>
                        <span class="badge @(dept.IsDirect ? "badge-direct" : "badge-indirect")">
                            @dept.CostType
                        </span>
                    </td>
                    <td>@dept.EmployeeCount</td>
                    <td>@dept.PresentDays</td>
                    <td>@dept.AbsentDays</td>
                    <td><strong>@dept.FormattedTotalCost</strong></td>
                    <td>@dept.FormattedAbsentCost</td>
                    <td>
                        <div>@dept.Percentage%</div>
                        <div class="progress-bar-custom">
                            <div class="progress-fill" style="width: @dept.Percentage%"></div>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<!-- Employee Details -->
<div class="table-container">
    <div class="section-title">Employee Details</div>
    <table id="employeeTable" class="table table-hover data-table">
        <thead>
            <tr>
                <th>Employee</th>
                <th>Department</th>
                <th>Category</th>
                <th>Cost Type</th>
                <th>Attendance</th>
                <th>Daily CTC</th>
                <th>Total Cost</th>
                <th>Health</th>
            </tr>
        </thead>
        <tbody id="employeeTableBody">
            @foreach (var emp in Model.EmployeeCosts)
            {
                <tr>
                    <td>
                        <div><strong>@emp.EmployeeName</strong></div>
                        <small class="text-muted">@emp.EmployeeCode</small>
                    </td>
                    <td>@emp.Department</td>
                    <td>@emp.Category</td>
                    <td>
                        <span class="badge @(emp.IsDirect ? "badge-direct" : "badge-indirect")">
                            @emp.CostType
                        </span>
                    </td>
                    <td>
                        <div>@emp.AttendancePercentage%</div>
                        <small class="text-muted">P: @emp.PresentDays | A: @emp.AbsentDays</small>
                    </td>
                    <td>@emp.FormattedDailyCTC</td>
                    <td><strong>@emp.FormattedTotalCost</strong></td>
                    <td>
                        @if (emp.AttendancePercentage >= 90)
                        {
                            <span class="health-indicator health-good"></span>
                        }
                        else if (emp.AttendancePercentage >= 75)
                        {
                            <span class="health-indicator health-warning"></span>
                        }
                        else
                        {
                            <span class="health-indicator health-bad"></span>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

@section Scripts {
    <script src="https://cdn.datatables.net/1.11.5/js/jquery.dataTables.min.js"></script>
    <script src="https://cdn.datatables.net/1.11.5/js/dataTables.bootstrap4.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js@3.9.1/dist/chart.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <script>
        var employeeDataTable;
        var departmentDataTable;
        var deptCostChart;
        var costTypeChart;

        $(document).ready(function() {
            // Initialize Select2
            $('#categorySelect').select2({
                theme: 'bootstrap4',
                placeholder: 'Select Categories',
                allowClear: true,
                closeOnSelect: false
            });

            // Initialize DataTables
            initializeDataTables();

            // Initialize Charts
            initializeCharts();

            // Auto-refresh handlers
            $('#companySelect').change(function() {
                loadCategoriesForCompany($(this).val());
                refreshDashboard();
            });

            $('#categorySelect, #startDate, #endDate').change(function() {
                refreshDashboard();
            });
        });

        function initializeDataTables() {
            // Employee DataTable
            employeeDataTable = $('#employeeTable').DataTable({
                pageLength: 10,
                responsive: true,
                order: [[6, 'desc']],
                columnDefs: [
                    { targets: [3, 7], orderable: false },
                    { targets: [5, 6], className: 'text-right' }
                ],
                language: {
                    search: "Search:",
                    lengthMenu: "Show _MENU_ entries",
                    info: "Showing _START_ to _END_ of _TOTAL_ employees"
                }
            });

            // Department DataTable
            departmentDataTable = $('#departmentTable').DataTable({
                pageLength: 10,
                responsive: true,
                order: [[5, 'desc']],
                columnDefs: [
                    { targets: [1, 7], orderable: false },
                    { targets: [2, 3, 4, 5, 6], className: 'text-right' }
                ],
                paging: false,
                searching: false,
                info: false
            });
        }

        function initializeCharts() {
            // Department Cost Chart
            var deptCtx = document.getElementById('deptCostChart').getContext('2d');
            deptCostChart = new Chart(deptCtx, {
                type: 'doughnut',
                data: {
                    labels: @Html.Raw(Json.Serialize(Model.DepartmentCosts.Select(d => d.Department))),
                    datasets: [{
                        data: @Html.Raw(Json.Serialize(Model.DepartmentCosts.Select(d => d.TotalCost))),
                        backgroundColor: [
                            '#3498db', '#2ecc71', '#f39c12', '#e74c3c', '#9b59b6',
                            '#1abc9c', '#34495e', '#16a085', '#27ae60', '#2980b9'
                        ]
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'right',
                            labels: {
                                font: { size: 11 }
                            }
                        }
                    }
                }
            });

            // Cost Type Chart
            var typeCtx = document.getElementById('costTypeChart').getContext('2d');
            costTypeChart = new Chart(typeCtx, {
                type: 'pie',
                data: {
                    labels: ['Direct Cost', 'Indirect Cost'],
                    datasets: [{
                        data: [@Model.Summary.DirectCost, @Model.Summary.IndirectCost],
                        backgroundColor: ['#27ae60', '#f39c12']
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'bottom'
                        }
                    }
                }
            });
        }

        function loadCategoriesForCompany(companyCode) {
            $.ajax({
                url: '@Url.Action("GetCategoriesByCompany", "CostsDashboard")',
                type: 'GET',
                data: { companyCode: companyCode },
                success: function(categories) {
                    var select = $('#categorySelect');
                    select.empty();
                    $.each(categories, function(i, cat) {
                        select.append(new Option(cat.text, cat.value, cat.selected, cat.selected));
                    });
                    select.trigger('change');
                }
            });
        }

        function refreshDashboard() {
            showLoading();

            $.ajax({
                url: '@Url.Action("RefreshData", "CostsDashboard")',
                type: 'POST',
                data: {
                    companyCode: $('#companySelect').val(),
                    categories: $('#categorySelect').val() || [],
                    startDate: $('#startDate').val(),
                    endDate: $('#endDate').val()
                },
                success: function(response) {
                    if (response.success) {
                        updateDashboard(response);
                    } else {
                        Swal.fire('Error', response.message, 'error');
                    }
                    hideLoading();
                },
                error: function() {
                    Swal.fire('Error', 'Failed to refresh dashboard', 'error');
                    hideLoading();
                }
            });
        }

        function updateDashboard(data) {
            // Update stats
            $('#attendanceRate').text(data.attendanceSummary.attendancePercentage + '%');
            $('#presentCount').text(data.attendanceSummary.presentCount);
            $('#totalEmployees').text(data.summary.totalEmployees);
            $('#totalCost').text(formatCurrency(data.summary.totalCost));
            $('#averageCost').text(formatCurrency(data.summary.averageDailyCost));
            $('#presentDays').text(data.summary.presentDays);
            $('#absentCost').text(formatCurrency(data.summary.absentCost));

            // Update tables
            updateDepartmentTable(data.departmentCosts);
            updateEmployeeTable(data.employeeCosts);

            // Update charts
            updateCharts(data);
        }

        function updateDepartmentTable(depts) {
            departmentDataTable.clear();
            $.each(depts, function(i, dept) {
                departmentDataTable.row.add([
                    dept.department,
                    '<span class="badge ' + (dept.costType === 'DIRECT' ? 'badge-direct' : 'badge-indirect') + '">' + dept.costType + '</span>',
                    dept.employeeCount,
                    dept.presentDays || 0,
                    dept.absentDays || 0,
                    '<strong>' + formatCurrency(dept.totalCost) + '</strong>',
                    formatCurrency(dept.absentCost || 0),
                    '<div>' + dept.percentage + '%</div><div class="progress-bar-custom"><div class="progress-fill" style="width:' + dept.percentage + '%"></div></div>'
                ]);
            });
            departmentDataTable.draw();
        }

        function updateEmployeeTable(employees) {
            employeeDataTable.clear();
            $.each(employees, function(i, emp) {
                var attendance = emp.presentDays + emp.absentDays > 0
                    ? Math.round((emp.presentDays * 100) / (emp.presentDays + emp.absentDays)) : 0;
                var healthIndicator = attendance >= 90 ? 'health-good' : attendance >= 75 ? 'health-warning' : 'health-bad';

                employeeDataTable.row.add([
                    '<div><strong>' + emp.employeeName + '</strong></div><small class="text-muted">' + emp.employeeCode + '</small>',
                    emp.department,
                    emp.category,
                    '<span class="badge ' + (emp.costType === 'DIRECT' ? 'badge-direct' : 'badge-indirect') + '">' + emp.costType + '</span>',
                    '<div>' + attendance + '%</div><small class="text-muted">P: ' + emp.presentDays + ' | A: ' + emp.absentDays + '</small>',
                    formatCurrency(emp.dailyCTC),
                    '<strong>' + formatCurrency(emp.totalCost) + '</strong>',
                    '<span class="health-indicator ' + healthIndicator + '"></span>'
                ]);
            });
            employeeDataTable.draw();
        }

        function updateCharts(data) {
            // Update department chart
            deptCostChart.data.labels = data.departmentCosts.map(d => d.department);
            deptCostChart.data.datasets[0].data = data.departmentCosts.map(d => d.totalCost);
            deptCostChart.update();

            // Update cost type chart
            costTypeChart.data.datasets[0].data = [data.summary.directCost, data.summary.indirectCost];
            costTypeChart.update();
        }

        function exportToExcel() {
            var form = $('<form>', {
                'method': 'POST',
                'action': '@Url.Action("ExportToExcel", "CostsDashboard")'
            });

            form.append($('<input>', {
                'type': 'hidden',
                'name': 'companyCode',
                'value': $('#companySelect').val()
            }));

            form.append($('<input>', {
                'type': 'hidden',
                'name': 'categoriesJson',
                'value': JSON.stringify($('#categorySelect').val() || [])
            }));

            form.append($('<input>', {
                'type': 'hidden',
                'name': 'startDate',
                'value': $('#startDate').val()
            }));

            form.append($('<input>', {
                'type': 'hidden',
                'name': 'endDate',
                'value': $('#endDate').val()
            }));

            form.appendTo('body').submit().remove();
        }

        function formatCurrency(amount) {
            return '₹' + parseFloat(amount).toLocaleString('en-IN', {
                minimumFractionDigits: 2,
                maximumFractionDigits: 2
            });
        }

        function showLoading() {
            $('#loadingOverlay').css('display', 'flex');
        }

        function hideLoading() {
            $('#loadingOverlay').hide();
        }
    </script>
}