@{
    ViewData["Title"] = "Dashboard";
}

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">

<style>
    /* Enhanced Dashboard Styles */
    .dashboard-container {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        min-height: 100vh;
        padding: 20px 0;
    }

    /* Real-time Stats with Circular Progress */
    .real-time-stats {
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(10px);
        border-radius: 20px;
        padding: 30px;
        margin-bottom: 30px;
        box-shadow: 0 20px 40px rgba(0,0,0,0.1);
    }

    .stats-header {
        text-align: center;
        margin-bottom: 30px;
    }

        .stats-header h2 {
            color: #2c3e50;
            font-size: 2.5rem;
            font-weight: 700;
            margin-bottom: 10px;
        }

    .last-updated {
        color: #7f8c8d;
        font-size: 0.9rem;
    }

    .stats-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 30px;
        margin-top: 30px;
    }

    .stat-circle {
        position: relative;
        display: flex;
        flex-direction: column;
        align-items: center;
        text-align: center;
    }

    .circle-container {
        position: relative;
        width: 120px;
        height: 120px;
        margin-bottom: 15px;
    }

    .circle-bg {
        fill: none;
        stroke: #ecf0f1;
        stroke-width: 8;
    }

    .circle-progress {
        fill: none;
        stroke-width: 8;
        stroke-linecap: round;
        transform: rotate(-90deg);
        transform-origin: 50% 50%;
        transition: stroke-dasharray 1s ease-in-out;
    }

        .circle-progress.present {
            stroke: #27ae60;
        }

        .circle-progress.absent {
            stroke: #e74c3c;
        }

        .circle-progress.layoff {
            stroke: #f39c12;
        }

        .circle-progress.total {
            stroke: #3498db;
        }

    .circle-text {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        text-align: center;
    }

    .circle-value {
        font-size: 1.8rem;
        font-weight: 700;
        color: #2c3e50;
        display: block;
    }

    .circle-count {
        font-size: 0.9rem;
        color: #7f8c8d;
        margin-top: 2px;
    }

    .stat-label {
        font-size: 1.1rem;
        font-weight: 600;
        color: #34495e;
        text-transform: uppercase;
        letter-spacing: 1px;
    }

    .stat-description {
        font-size: 0.9rem;
        color: #7f8c8d;
        margin-top: 5px;
    }

    /* Enhanced Shift Stats */
    .shift-stats-container {
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(10px);
        border-radius: 20px;
        padding: 30px;
        margin-bottom: 30px;
        box-shadow: 0 20px 40px rgba(0,0,0,0.1);
    }

    .shift-header {
        text-align: center;
        margin-bottom: 30px;
    }

        .shift-header h2 {
            color: #2c3e50;
            font-size: 2rem;
            font-weight: 700;
            margin-bottom: 10px;
        }

    .shift-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
        gap: 25px;
    }

    .shift-card {
        border-radius: 15px;
        padding: 25px;
        color: white;
        position: relative;
        overflow: hidden;
        transition: all 0.3s ease;
    }

        .shift-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 30px rgba(0,0,0,0.2);
        }

        .shift-card.first-shift {
            background: linear-gradient(135deg, #FF6B6B 0%, #FF8E8E 100%);
        }

        .shift-card.general-shift {
            background: linear-gradient(135deg, #4ECDC4 0%, #44A08D 100%);
        }

        .shift-card.second-shift {
            background: linear-gradient(135deg, #A8E6CF 0%, #88D8A3 100%);
        }

        .shift-card::before {
            content: '';
            position: absolute;
            top: 0;
            right: 0;
            width: 100px;
            height: 100px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 50%;
            transform: translate(30px, -30px);
        }

    .shift-name {
        font-size: 1.3rem;
        font-weight: 700;
        margin-bottom: 20px;
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .shift-stats-row {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 20px;
        margin-bottom: 20px;
    }

    .shift-metric {
        text-align: center;
    }

    .shift-metric-value {
        font-size: 2rem;
        font-weight: 700;
        display: block;
        margin-bottom: 5px;
    }

    .shift-metric-label {
        font-size: 0.9rem;
        opacity: 0.9;
        text-transform: uppercase;
        letter-spacing: 1px;
    }

    .shift-progress-container {
        margin-top: 20px;
    }

    .shift-progress-bar {
        width: 100%;
        height: 8px;
        background: rgba(255, 255, 255, 0.2);
        border-radius: 4px;
        overflow: hidden;
        position: relative;
    }

    .progress-segments {
        display: flex;
        height: 100%;
        border-radius: 4px;
        overflow: hidden;
    }

    .progress-segment {
        transition: width 1s ease-in-out;
    }

        .progress-segment.present {
            background: rgba(255, 255, 255, 0.9);
        }

        .progress-segment.absent {
            background: rgba(255, 255, 255, 0.4);
        }

        .progress-segment.layoff {
            background: rgba(255, 255, 255, 0.6);
        }

    .progress-legend {
        display: flex;
        justify-content: space-between;
        margin-top: 10px;
        font-size: 0.8rem;
        opacity: 0.9;
    }

    .legend-item {
        display: flex;
        align-items: center;
        gap: 5px;
    }

    .legend-color {
        width: 12px;
        height: 12px;
        border-radius: 2px;
    }

        .legend-color.present {
            background: rgba(255, 255, 255, 0.9);
        }

        .legend-color.absent {
            background: rgba(255, 255, 255, 0.4);
        }

        .legend-color.layoff {
            background: rgba(255, 255, 255, 0.6);
        }

    /* Original Action Cards - Enhanced */
    .action-card {
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(10px);
        border: none;
        border-radius: 15px;
        padding: 30px;
        height: 100%;
        box-shadow: 0 10px 30px rgba(0,0,0,0.08);
        transition: all 0.3s ease;
        text-decoration: none;
        color: inherit;
        display: block;
    }

        .action-card:hover {
            transform: translateY(-8px);
            box-shadow: 0 20px 40px rgba(0,0,0,0.15);
            text-decoration: none;
            color: inherit;
        }

    .action-icon {
        font-size: 3rem;
        margin-bottom: 20px;
        display: block;
    }

    .action-title {
        font-size: 1.4rem;
        font-weight: 600;
        margin-bottom: 15px;
        color: #2c3e50;
    }

    .action-description {
        color: #7f8c8d;
        font-size: 0.95rem;
        line-height: 1.5;
    }

    .action-card.primary .action-icon {
        color: #3498db;
    }

    .action-card.success .action-icon {
        color: #2ecc71;
    }

    .action-card.warning .action-icon {
        color: #f39c12;
    }

    .action-card.danger .action-icon {
        color: #e74c3c;
    }

    .action-card.info .action-icon {
        color: #9b59b6;
    }

    .info-card {
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(10px);
        border: none;
        border-radius: 15px;
        padding: 25px;
        box-shadow: 0 8px 25px rgba(0,0,0,0.08);
        height: 100%;
    }

        .info-card h5 {
            color: #2c3e50;
            font-weight: 600;
            margin-bottom: 20px;
        }

    .info-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 12px 0;
        border-bottom: 1px solid #ecf0f1;
    }

        .info-item:last-child {
            border-bottom: none;
        }

    .info-label {
        font-weight: 500;
        color: #34495e;
    }

    .info-value {
        font-weight: 600;
        color: #2980b9;
    }

    .status-indicator {
        display: inline-block;
        width: 12px;
        height: 12px;
        border-radius: 50%;
        margin-right: 8px;
    }

    .status-success {
        background-color: #2ecc71;
    }

    .status-warning {
        background-color: #f39c12;
    }

    .loading-spinner {
        animation: spin 1s linear infinite;
    }

    @@keyframes spin {
        from

    {
        transform: rotate(0deg);
    }

    to {
        transform: rotate(360deg);
    }

    }

    /* Responsive Design */
    @@media (max-width: 768px) {
        .stats-grid

    {
        grid-template-columns: repeat(2, 1fr);
        gap: 20px;
    }

    .shift-grid {
        grid-template-columns: 1fr;
    }

    .circle-container {
        width: 100px;
        height: 100px;
    }

    .circle-value {
        font-size: 1.4rem;
    }

    .stats-header h2 {
        font-size: 2rem;
    }

    .shift-header h2 {
        font-size: 1.5rem;
    }

    }
</style>

<div class="dashboard-container">
    <div class="container-fluid">

        @if (ViewBag.UserRole == "Admin")
        {
            <div class="alert alert-success" style="border: none; border-radius: 10px; background: rgba(212, 237, 218, 0.9); backdrop-filter: blur(10px);">
                <i class="fas fa-crown"></i> <strong>Admin Access:</strong> You have full access to all company data and analytics.
            </div>
        }
        else
        {
            <div class="alert alert-info d-flex justify-content-between align-items-center" style="border: none; border-radius: 10px; background: rgba(209, 236, 241, 0.9); backdrop-filter: blur(10px);">
                <div>
                    <i class="fas fa-building"></i> <strong>Company:</strong> @User.FindFirst("CompanyName")?.Value
                </div>
                <div>
                    <small style="opacity: 0.8;">
                        <i class="fas fa-calendar-alt"></i> @DateTime.Now.ToString("dddd, MMMM dd, yyyy")
                    </small>
                </div>
            </div>
        }

        <!-- Enhanced Real-time Stats with Circular Progress -->
        <div class="real-time-stats">
            <div class="stats-header">
                <h2><i class="fas fa-chart-pie"></i> Today's Attendance Distribution</h2>
                <div class="last-updated" id="lastUpdated">
                    <i class="fas fa-sync-alt loading-spinner"></i> Loading...
                </div>
            </div>

            <div class="stats-grid" id="statsGrid">
                <!-- Will be populated by JavaScript -->
                <div class="stat-circle">
                    <div class="circle-container">
                        <svg width="120" height="120">
                            <circle class="circle-bg" cx="60" cy="60" r="52"></circle>
                            <circle class="circle-progress present" cx="60" cy="60" r="52" stroke-dasharray="0 327"></circle>
                        </svg>
                        <div class="circle-text">
                            <span class="circle-value">-</span>
                            <div class="circle-count">-</div>
                        </div>
                    </div>
                    <div class="stat-label">Loading...</div>
                    <div class="stat-description">-%</div>
                </div>
            </div>
        </div>

        <!-- Enhanced Shift Stats -->
        <div class="shift-stats-container">
            <div class="shift-header">
                <h2><i class="fas fa-clock"></i> Shift-wise Performance</h2>
                <div class="last-updated" id="shiftLastUpdated">
                    <i class="fas fa-sync-alt loading-spinner"></i> Loading shift data...
                </div>
            </div>

            <div class="shift-grid" id="shiftGrid">
                <!-- Will be populated by JavaScript -->
                <div class="shift-card">
                    <div class="shift-name">
                        <i class="fas fa-clock"></i> Loading...
                    </div>
                    <div class="shift-stats-row">
                        <div class="shift-metric">
                            <span class="shift-metric-value">-</span>
                            <span class="shift-metric-label">Total</span>
                        </div>
                        <div class="shift-metric">
                            <span class="shift-metric-value">-</span>
                            <span class="shift-metric-label">Attendance</span>
                        </div>
                    </div>
                    <div class="shift-progress-container">
                        <div class="shift-progress-bar">
                            <div class="progress-segments">
                                <div class="progress-segment present" style="width: 0%"></div>
                                <div class="progress-segment absent" style="width: 0%"></div>
                                <div class="progress-segment layoff" style="width: 0%"></div>
                            </div>
                        </div>
                        <div class="progress-legend">
                            <div class="legend-item">
                                <div class="legend-color present"></div>
                                <span>Present (-%)</span>
                            </div>
                            <div class="legend-item">
                                <div class="legend-color absent"></div>
                                <span>Absent (-%)</span>
                            </div>
                            <div class="legend-item">
                                <div class="legend-color layoff"></div>
                                <span>Layoff (-%)</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <!-- Quick Actions -->
            <div class="col-md-8">
                <h3 style="color: white; margin-bottom: 25px; font-weight: 600;">
                    <i class="fas fa-bolt"></i> Quick Actions
                </h3>
                <div class="row">
                    <div class="col-md-6 mb-4">
                        <a href="@Url.Action("Index", "AttendanceSummary")" class="action-card primary">
                            <i class="fas fa-chart-line action-icon"></i>
                            <h5 class="action-title">Attendance Summary</h5>
                            <p class="action-description">
                                View comprehensive attendance reports with filtering and export capabilities including layoff tracking.
                            </p>
                        </a>
                    </div>
                    <div class="col-md-6 mb-4">
                        <a href="@Url.Action("AttendanceReport", "Home")" class="action-card success">
                            <i class="fas fa-clipboard-list action-icon"></i>
                            <h5 class="action-title">Daily Report</h5>
                            <p class="action-description">
                                Generate detailed daily attendance reports with department-wise breakdown and employee status.
                            </p>
                        </a>
                    </div>
                    <div class="col-md-6 mb-4">
                        <a href="@Url.Action("DepartmentAttendance", "Home")" class="action-card warning">
                            <i class="fas fa-building action-icon"></i>
                            <h5 class="action-title">Department Analysis</h5>
                            <p class="action-description">
                                Analyze department-wise attendance patterns and section-wise performance metrics with layoff insights.
                            </p>
                        </a>
                    </div>
                    @if (User.IsInRole("Admin"))
                    {
                        <div class="col-md-6 mb-4">
                            <a href="@Url.Action("Users", "Admin")" class="action-card danger">
                                <i class="fas fa-users-cog action-icon"></i>
                                <h5 class="action-title">User Management</h5>
                                <p class="action-description">
                                    Manage user accounts, roles, permissions, and system access controls.
                                </p>
                            </a>
                        </div>
                    }
                    <div class="col-md-6 mb-4">
                        <div class="action-card info" style="cursor: pointer;" onclick="refreshAttendance()">
                            <i class="fas fa-sync-alt action-icon" id="refreshIcon"></i>
                            <h5 class="action-title">Refresh Data</h5>
                            <p class="action-description">
                                Update attendance data and synchronize with the latest punch records including layoff status.
                            </p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- System Information -->
            <div class="col-md-4">
                <h3 style="color: white; margin-bottom: 25px; font-weight: 600;">
                    <i class="fas fa-info-circle"></i> System Info
                </h3>
                <div class="info-card">
                    <h5><i class="fas fa-server"></i> System Status</h5>
                    <div class="info-item">
                        <span class="info-label">
                            <span class="status-indicator status-success"></span>Current Date
                        </span>
                        <span class="info-value">@DateTime.Now.ToString("yyyy-MM-dd")</span>
                    </div>
                    <div class="info-item">
                        <span class="info-label">
                            <span class="status-indicator status-success"></span>Your Role
                        </span>
                        <span class="info-value">@User.FindFirst(System.Security.Claims.ClaimTypes.Role)?.Value</span>
                    </div>
                    <div class="info-item">
                        <span class="info-label">
                            <span class="status-indicator status-success"></span>Auto-refresh
                        </span>
                        <span class="info-value">Every 3 min</span>
                    </div>
                    <div class="info-item">
                        <span class="info-label">
                            <span class="status-indicator status-success"></span>Real-time Updates
                        </span>
                        <span class="info-value">Enabled</span>
                    </div>
                    <div class="info-item">
                        <span class="info-label">
                            <span class="status-indicator status-success"></span>Layoff Tracking
                        </span>
                        <span class="info-value">Active</span>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    let refreshInterval;
    var userCompanyCode = @ViewBag.UserCompanyCode;
    var userRole = '@ViewBag.UserRole';

    function updateMainStats(data) {
        const total = data.totalEmployees;
        const present = data.presentEmployees;
        const absent = data.absentEmployees;
        const layoff = data.layoffEmployees;

        // Calculate percentages
        const presentPercent = total > 0 ? Math.round((present / total) * 100) : 0;
        const absentPercent = total > 0 ? Math.round((absent / total) * 100) : 0;
        const layoffPercent = total > 0 ? Math.round((layoff / total) * 100) : 0;

        const statsData = [
            {
                label: 'Present',
                value: presentPercent,
                count: present,
                color: '#27ae60',
                class: 'present'
            },
            {
                label: 'Absent',
                value: absentPercent,
                count: absent,
                color: '#e74c3c',
                class: 'absent'
            },
            {
                label: 'Layoff',
                value: layoffPercent,
                count: layoff,
                color: '#f39c12',
                class: 'layoff'
            },
            {
                label: 'Total',
                value: 100,
                count: total,
                color: '#3498db',
                class: 'total'
            }
        ];

        const grid = document.getElementById('statsGrid');
        const circumference = 2 * Math.PI * 52; // radius = 52

        let html = '';
        statsData.forEach(stat => {
            const dashArray = stat.label === 'Total' ? circumference : (stat.value / 100) * circumference;
            const dashOffset = stat.label === 'Total' ? 0 : circumference - dashArray;

            html += `
                <div class="stat-circle">
                    <div class="circle-container">
                        <svg width="120" height="120">
                            <circle class="circle-bg" cx="60" cy="60" r="52"></circle>
                            <circle class="circle-progress ${stat.class}" cx="60" cy="60" r="52"
                                    stroke-dasharray="${dashArray} ${circumference}"
                                    stroke-dashoffset="${dashOffset}"></circle>
                        </svg>
                        <div class="circle-text">
                            <span class="circle-value">${stat.value}%</span>
                            <div class="circle-count">${stat.count.toLocaleString()}</div>
                        </div>
                    </div>
                    <div class="stat-label">${stat.label}</div>
                    <div class="stat-description">${stat.count.toLocaleString()} employees</div>
                </div>
            `;
        });

        grid.innerHTML = html;
        document.getElementById('lastUpdated').innerHTML =
            `<i class="fas fa-check-circle"></i> Updated: ${data.lastUpdated}`;
    }

    function updateShiftStats(shifts) {
        const grid = document.getElementById('shiftGrid');
        const shiftClasses = {
            'F': 'first-shift',
            'G': 'general-shift',
            'S': 'second-shift'
        };

        let html = '';
        shifts.forEach(shift => {
            const total = shift.totalEmployees;
            const present = shift.presentEmployees;
            const absent = shift.absentEmployees;
            const layoff = shift.layoffEmployees || 0;

            const presentPercent = total > 0 ? Math.round((present / total) * 100) : 0;
            const absentPercent = total > 0 ? Math.round((absent / total) * 100) : 0;
            const layoffPercent = total > 0 ? Math.round((layoff / total) * 100) : 0;

            html += `
                <div class="shift-card ${shiftClasses[shift.shiftCode] || ''}">
                    <div class="shift-name">
                        <i class="fas fa-clock"></i> ${shift.shiftName}
                    </div>
                    <div class="shift-stats-row">
                        <div class="shift-metric">
                            <span class="shift-metric-value">${total.toLocaleString()}</span>
                            <span class="shift-metric-label">Total Staff</span>
                        </div>
                        <div class="shift-metric">
                            <span class="shift-metric-value">${shift.attendancePercentage.toFixed(1)}%</span>
                            <span class="shift-metric-label">Attendance Rate</span>
                        </div>
                    </div>
                    <div class="shift-progress-container">
                        <div class="shift-progress-bar">
                            <div class="progress-segments">
                                <div class="progress-segment present" style="width: ${presentPercent}%"></div>
                                <div class="progress-segment absent" style="width: ${absentPercent}%"></div>
                                <div class="progress-segment layoff" style="width: ${layoffPercent}%"></div>
                            </div>
                        </div>
                        <div class="progress-legend">
                            <div class="legend-item">
                                <div class="legend-color present"></div>
                                <span>Present (${presentPercent}%)</span>
                            </div>
                            <div class="legend-item">
                                <div class="legend-color absent"></div>
                                <span>Absent (${absentPercent}%)</span>
                            </div>
                            <div class="legend-item">
                                <div class="legend-color layoff"></div>
                                <span>Layoff (${layoffPercent}%)</span>
                            </div>
                        </div>
                    </div>
                </div>
            `;
        });

        grid.innerHTML = html;
        document.getElementById('shiftLastUpdated').innerHTML =
            `<i class="fas fa-check-circle"></i> Updated: ${new Date().toLocaleTimeString()}`;
    }

    function loadRealTimeStats() {
        const companyCode = userRole === 'Admin' ? 0 : userCompanyCode;

        fetch('/Home/GetAttendanceStats?companyCode=' + companyCode)
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    updateMainStats({
                        totalEmployees: data.totalEmployees,
                        presentEmployees: data.presentEmployees,
                        absentEmployees: data.absentEmployees,
                        layoffEmployees: data.layoffEmployees || 0,
                        lastUpdated: data.lastUpdated
                    });
                }
            })
            .catch(error => {
                console.error('Error loading stats:', error);
                document.getElementById('lastUpdated').innerHTML =
                    '<i class="fas fa-exclamation-triangle"></i> Update failed';
            });
    }

    function loadShiftStats() {
        const companyCode = userRole === 'Admin' ? 0 : userCompanyCode;

        fetch('/Home/GetShiftAttendanceStats?companyCode=' + companyCode)
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    updateShiftStats(data.shifts);
                }
            })
            .catch(error => {
                console.error('Error loading shift stats:', error);
                document.getElementById('shiftLastUpdated').innerHTML =
                    '<i class="fas fa-exclamation-triangle"></i> Update failed';
            });
    }

    function refreshAttendance() {
        const refreshIcon = document.getElementById('refreshIcon');
        refreshIcon.classList.add('loading-spinner');

        fetch('/Home/RefreshAttendance', { method: 'POST' })
            .then(response => response.json())
            .then(data => {
                refreshIcon.classList.remove('loading-spinner');

                if (data.success) {
                    showNotification('Attendance data refreshed successfully!', 'success');
                    loadRealTimeStats();
                    loadShiftStats();
                } else {
                    showNotification('Error: ' + data.message, 'error');
                }
            })
            .catch(error => {
                refreshIcon.classList.remove('loading-spinner');
                showNotification('Failed to refresh data', 'error');
            });
    }

    function showNotification(message, type) {
        const notification = document.createElement('div');
        notification.className = 'alert alert-' + (type === 'success' ? 'success' : 'danger') + ' position-fixed';
        notification.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px; backdrop-filter: blur(10px);';
        notification.innerHTML = '<i class="fas fa-' + (type === 'success' ? 'check-circle' : 'exclamation-triangle') + '"></i> ' +
            message +
            '<button type="button" class="btn-close float-end" onclick="this.parentElement.remove()"></button>';

        document.body.appendChild(notification);

        setTimeout(function() {
            if (notification.parentElement) {
                notification.remove();
            }
        }, 5000);
    }

    document.addEventListener('DOMContentLoaded', function() {
        loadRealTimeStats();
        loadShiftStats();

        // Auto-refresh every 3 minutes
        refreshInterval = setInterval(function() {
            loadRealTimeStats();
            loadShiftStats();
        }, 180000);
    });

    window.addEventListener('beforeunload', function() {
        if (refreshInterval) {
            clearInterval(refreshInterval);
        }
    });
</script>