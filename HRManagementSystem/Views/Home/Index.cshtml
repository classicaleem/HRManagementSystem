@{
    ViewData["Title"] = "Dashboard";
}

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">

<style>
    .dashboard-welcome {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 40px;
        border-radius: 20px;
        margin-bottom: 30px;
        box-shadow: 0 15px 35px rgba(0,0,0,0.1);
    }

    .dashboard-title {
        font-size: 3rem;
        font-weight: 700;
        margin-bottom: 15px;
        text-shadow: 0 2px 4px rgba(0,0,0,0.3);
    }

    .dashboard-subtitle {
        font-size: 1.2rem;
        opacity: 0.9;
        margin-bottom: 0;
    }

    .action-card {
        background: white;
        border: none;
        border-radius: 15px;
        padding: 30px;
        height: 100%;
        box-shadow: 0 10px 30px rgba(0,0,0,0.08);
        transition: all 0.3s ease;
        text-decoration: none;
        color: inherit;
        display: block;
    }

        .action-card:hover {
            transform: translateY(-8px);
            box-shadow: 0 20px 40px rgba(0,0,0,0.15);
            text-decoration: none;
            color: inherit;
        }

    .action-icon {
        font-size: 3rem;
        margin-bottom: 20px;
        display: block;
    }

    .action-title {
        font-size: 1.4rem;
        font-weight: 600;
        margin-bottom: 15px;
        color: #2c3e50;
    }

    .action-description {
        color: #7f8c8d;
        font-size: 0.95rem;
        line-height: 1.5;
    }

    .action-card.primary .action-icon {
        color: #3498db;
    }

    .action-card.success .action-icon {
        color: #2ecc71;
    }

    .action-card.warning .action-icon {
        color: #f39c12;
    }

    .action-card.danger .action-icon {
        color: #e74c3c;
    }

    .action-card.info .action-icon {
        color: #9b59b6;
    }

    .info-card {
        background: white;
        border: none;
        border-radius: 15px;
        padding: 25px;
        box-shadow: 0 8px 25px rgba(0,0,0,0.08);
        height: 100%;
    }

        .info-card h5 {
            color: #2c3e50;
            font-weight: 600;
            margin-bottom: 20px;
        }

    .info-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 12px 0;
        border-bottom: 1px solid #ecf0f1;
    }

        .info-item:last-child {
            border-bottom: none;
        }

    .info-label {
        font-weight: 500;
        color: #34495e;
    }

    .info-value {
        font-weight: 600;
        color: #2980b9;
    }

    .status-indicator {
        display: inline-block;
        width: 12px;
        height: 12px;
        border-radius: 50%;
        margin-right: 8px;
    }

    .status-success {
        background-color: #2ecc71;
    }

    .status-warning {
        background-color: #f39c12;
    }

    .real-time-stats {
        background: linear-gradient(135deg, #11998e 0%, #38ef7d 100%);
        color: white;
        padding: 25px;
        border-radius: 15px;
        margin-bottom: 20px;
        text-align: center;
    }

        .real-time-stats h4 {
            margin-bottom: 15px;
            font-weight: 600;
        }

    .stats-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
        gap: 20px;
        margin-top: 20px;
    }

    .stat-item {
        text-align: center;
    }

    .stat-value {
        font-size: 2rem;
        font-weight: 700;
        display: block;
        margin-bottom: 5px;
    }

    .stat-label {
        font-size: 0.9rem;
        opacity: 0.9;
        text-transform: uppercase;
        letter-spacing: 1px;
    }

    .layoff-stat {
        color: #f39c12 !important;
    }

    /* Shift Stats Styles */
    .shift-stats-container {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border-radius: 15px;
        padding: 25px;
        margin-bottom: 20px;
        color: white;
    }

    .shift-stats-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 20px;
        margin-top: 20px;
    }

    .shift-card {
        background: rgba(255, 255, 255, 0.1);
        border-radius: 12px;
        padding: 20px;
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.2);
        transition: all 0.3s ease;
    }

        .shift-card:hover {
            transform: translateY(-3px);
            background: rgba(255, 255, 255, 0.15);
        }

    .shift-header {
        display: flex;
        align-items: center;
        justify-content: space-between;
        margin-bottom: 15px;
    }

    .shift-name {
        font-size: 1.1rem;
        font-weight: 600;
        margin: 0;
    }

    .shift-percentage {
        font-size: 1.5rem;
        font-weight: 700;
        opacity: 0.9;
    }

    .shift-stats {
        display: grid;
        grid-template-columns: repeat(4, 1fr);
        gap: 15px;
        margin-top: 15px;
    }

    .shift-stat-item {
        text-align: center;
    }

    .shift-stat-value {
        font-size: 1.2rem;
        font-weight: 700;
        display: block;
        margin-bottom: 3px;
    }

    .shift-stat-label {
        font-size: 0.75rem;
        opacity: 0.8;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .shift-progress {
        width: 100%;
        height: 6px;
        background: rgba(255, 255, 255, 0.2);
        border-radius: 3px;
        overflow: hidden;
        margin-top: 10px;
    }

    .shift-progress-bar {
        height: 100%;
        background: linear-gradient(90deg, #4CAF50, #81C784);
        border-radius: 3px;
        transition: width 0.8s ease;
    }

    .loading-spinner {
        animation: spin 1s linear infinite;
    }

    @@keyframes spin {
        from

    {
        transform: rotate(0deg);
    }

    to {
        transform: rotate(360deg);
    }

    }
</style>

@* <div class="dashboard-welcome">
    <div class="row align-items-center">
        <div class="col-md-8">
            <h1 class="dashboard-title">
                <i class="fas fa-tachometer-alt"></i> HR Management Dashboard
            </h1>
            <p class="dashboard-subtitle">
                Welcome back, @User.Identity.Name! Here's your HR overview for today.
            </p>
        </div>
        <div class="col-md-4 text-end">
            <div class="text-end">
                <small style="opacity: 0.8;">
                    <i class="fas fa-calendar-alt"></i> @DateTime.Now.ToString("dddd, MMMM dd, yyyy")
                </small>
            </div>
        </div>
    </div>
</div> *@

@if (ViewBag.UserRole == "Admin")
{
    <div class="alert alert-success" style="border: none; border-radius: 10px; background: linear-gradient(135deg, #d4edda, #c3e6cb);">
        <i class="fas fa-crown"></i> <strong>Admin Access:</strong> You have full access to all company data and analytics.
    </div>
}
else
{
    <div class="alert alert-info d-flex justify-content-between align-items-center" style="border: none; border-radius: 10px; background: linear-gradient(135deg, #d1ecf1, #bee5eb);">
        <div>
            <i class="fas fa-building"></i> <strong>Company:</strong> @User.FindFirst("CompanyName")?.Value
        </div>
        <div>
            <small style="opacity: 0.8;">
                <i class="fas fa-calendar-alt"></i> @DateTime.Now.ToString("dddd, MMMM dd, yyyy")
            </small>
        </div>
    </div>

}

<!-- Real-time Stats with Layoff -->
<div class="real-time-stats" id="realTimeStats">
    <h4><i class="fas fa-chart-line"></i> Today's Live Stats</h4>
    <div id="lastUpdated" style="opacity: 0.8; font-size: 0.9rem;">
        <i class="fas fa-sync-alt loading-spinner"></i> Loading...
    </div>
    <div class="stats-grid">
        <div class="stat-item">
            <span class="stat-value" id="totalEmployees">-</span>
            <span class="stat-label">Total</span>
        </div>
        <div class="stat-item">
            <span class="stat-value" id="presentEmployees">-</span>
            <span class="stat-label">Present</span>
        </div>
        <div class="stat-item">
            <span class="stat-value" id="absentEmployees">-</span>
            <span class="stat-label">Absent</span>
        </div>
        <div class="stat-item">
            <span class="stat-value layoff-stat" id="layoffEmployees">-</span>
            <span class="stat-label">Layoff</span>
        </div>
        <div class="stat-item">
            <span class="stat-value" id="attendanceRate">-</span>
            <span class="stat-label">Rate %</span>
        </div>
    </div>
</div>

<!-- Shift-wise Attendance Stats with Layoff -->
<div class="shift-stats-container">
    <h4><i class="fas fa-clock"></i> Shift-wise Attendance</h4>
    <div id="shiftLastUpdated" style="opacity: 0.8; font-size: 0.9rem; margin-bottom: 10px;">
        <i class="fas fa-sync-alt loading-spinner"></i> Loading shift data...
    </div>
    <div class="shift-stats-grid" id="shiftStatsGrid">
        <!-- Shift cards will be populated by JavaScript -->
        <div class="shift-card">
            <div class="shift-header">
                <h5 class="shift-name">Loading...</h5>
                <span class="shift-percentage">-</span>
            </div>
            <div class="shift-progress">
                <div class="shift-progress-bar" style="width: 0%"></div>
            </div>
            <div class="shift-stats">
                <div class="shift-stat-item">
                    <span class="shift-stat-value">-</span>
                    <span class="shift-stat-label">Total</span>
                </div>
                <div class="shift-stat-item">
                    <span class="shift-stat-value">-</span>
                    <span class="shift-stat-label">Present</span>
                </div>
                <div class="shift-stat-item">
                    <span class="shift-stat-value">-</span>
                    <span class="shift-stat-label">Absent</span>
                </div>
                <div class="shift-stat-item">
                    <span class="shift-stat-value layoff-stat">-</span>
                    <span class="shift-stat-label">Layoff</span>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <!-- Quick Actions -->
    <div class="col-md-8">
        <h3 style="color: #2c3e50; margin-bottom: 25px; font-weight: 600;">
            <i class="fas fa-bolt"></i> Quick Actions
        </h3>
        <div class="row">
            <div class="col-md-6 mb-4">
                <a href="@Url.Action("Index", "AttendanceSummary")" class="action-card primary">
                    <i class="fas fa-chart-line action-icon"></i>
                    <h5 class="action-title">Attendance Summary</h5>
                    <p class="action-description">
                        View comprehensive attendance reports with filtering and export capabilities including layoff tracking.
                    </p>
                </a>
            </div>
            <div class="col-md-6 mb-4">
                <a href="@Url.Action("AttendanceReport", "Home")" class="action-card success">
                    <i class="fas fa-clipboard-list action-icon"></i>
                    <h5 class="action-title">Daily Report</h5>
                    <p class="action-description">
                        Generate detailed daily attendance reports with department-wise breakdown and employee status.
                    </p>
                </a>
            </div>
            <div class="col-md-6 mb-4">
                <a href="@Url.Action("DepartmentAttendance", "Home")" class="action-card warning">
                    <i class="fas fa-building action-icon"></i>
                    <h5 class="action-title">Department Analysis</h5>
                    <p class="action-description">
                        Analyze department-wise attendance patterns and section-wise performance metrics with layoff insights.
                    </p>
                </a>
            </div>
            @if (User.IsInRole("Admin"))
            {
                <div class="col-md-6 mb-4">
                    <a href="@Url.Action("Users", "Admin")" class="action-card danger">
                        <i class="fas fa-users-cog action-icon"></i>
                        <h5 class="action-title">User Management</h5>
                        <p class="action-description">
                            Manage user accounts, roles, permissions, and system access controls.
                        </p>
                    </a>
                </div>
            }
            <div class="col-md-6 mb-4">
                <div class="action-card info" style="cursor: pointer;" onclick="refreshAttendance()">
                    <i class="fas fa-sync-alt action-icon" id="refreshIcon"></i>
                    <h5 class="action-title">Refresh Data</h5>
                    <p class="action-description">
                        Update attendance data and synchronize with the latest punch records including layoff status.
                    </p>
                </div>
            </div>
        </div>
    </div>

    <!-- System Information with Layoff Tracking -->
    <div class="col-md-4">
        <h3 style="color: #2c3e50; margin-bottom: 25px; font-weight: 600;">
            <i class="fas fa-info-circle"></i> System Info
        </h3>
        <div class="info-card">
            <h5><i class="fas fa-server"></i> System Status</h5>
            <div class="info-item">
                <span class="info-label">
                    <span class="status-indicator status-success"></span>Current Date
                </span>
                <span class="info-value">@DateTime.Now.ToString("yyyy-MM-dd")</span>
            </div>
            <div class="info-item">
                <span class="info-label">
                    <span class="status-indicator status-success"></span>Your Role
                </span>
                <span class="info-value">@User.FindFirst(System.Security.Claims.ClaimTypes.Role)?.Value</span>
            </div>
            <div class="info-item">
                <span class="info-label">
                    <span class="status-indicator status-success"></span>Auto-refresh
                </span>
                <span class="info-value">Every 3 min</span>
            </div>
            <div class="info-item">
                <span class="info-label">
                    <span class="status-indicator status-success"></span>Real-time Updates
                </span>
                <span class="info-value">Enabled</span>
            </div>
            <div class="info-item">
                <span class="info-label">
                    <span class="status-indicator status-success"></span>Layoff Tracking
                </span>
                <span class="info-value">Active</span>
            </div>
        </div>

        <!-- Quick Stats Card with Layoff Insights -->
       @*  <div class="info-card mt-4">
            <h5><i class="fas fa-chart-pie"></i> Quick Insights</h5>
            <div id="quickInsights">
                <div class="text-center">
                    <i class="fas fa-spinner loading-spinner text-muted"></i>
                    <p class="text-muted mt-2">Loading insights...</p>
                </div>
            </div>
        </div> *@
    </div>
</div>

<script>
    let refreshInterval;
    var userCompanyCode = @ViewBag.UserCompanyCode;
    var userRole = '@ViewBag.UserRole';

    document.addEventListener('DOMContentLoaded', function() {
        loadRealTimeStats();
        loadShiftStats();

        // Auto-refresh every 3 minutes
        refreshInterval = setInterval(function() {
            loadRealTimeStats();
            loadShiftStats();
        }, 180000);
    });

    function loadRealTimeStats() {
        const companyCode = userRole === 'Admin' ? 0 : userCompanyCode;

        fetch('/Home/GetAttendanceStats?companyCode=' + companyCode)
            .then(function(response) { return response.json(); })
            .then(function(data) {
                if (data.success) {
                    document.getElementById('totalEmployees').textContent = data.totalEmployees.toLocaleString();
                    document.getElementById('presentEmployees').textContent = data.presentEmployees.toLocaleString();
                    document.getElementById('absentEmployees').textContent = data.absentEmployees.toLocaleString();
                    document.getElementById('layoffEmployees').textContent = (data.layoffEmployees || 0).toLocaleString();

                    // Use the provided attendance percentage or calculate it
                    const rate = data.attendancePercentage ||
                        (data.totalEmployees > 0 ? Math.round((data.presentEmployees / data.totalEmployees) * 100) : 0);
                    document.getElementById('attendanceRate').textContent = typeof rate === 'number' ? rate.toFixed(0) : rate;

                    document.getElementById('lastUpdated').innerHTML =
                        '<i class="fas fa-check-circle"></i> Updated: ' + data.lastUpdated;
                    // updateQuickInsights(data);
                }
            })
            .catch(function(error) {
                console.error('Error loading stats:', error);
                document.getElementById('lastUpdated').innerHTML =
                    '<i class="fas fa-exclamation-triangle"></i> Update failed';
            });
    }

    function loadShiftStats() {
        const companyCode = userRole === 'Admin' ? 0 : userCompanyCode;

        fetch('/Home/GetShiftAttendanceStats?companyCode=' + companyCode)
            .then(function(response) { return response.json(); })
            .then(function(data) {
                if (data.success) {
                    updateShiftDisplay(data.shifts);
                    document.getElementById('shiftLastUpdated').innerHTML =
                        '<i class="fas fa-check-circle"></i> Updated: ' + data.lastUpdated;
                }
            })
            .catch(function(error) {
                console.error('Error loading shift stats:', error);
                document.getElementById('shiftLastUpdated').innerHTML =
                    '<i class="fas fa-exclamation-triangle"></i> Update failed';
            });
    }

    function updateShiftDisplay(shifts) {
        const container = document.getElementById('shiftStatsGrid');

        // Get shift colors for different shifts
        const shiftColors = {
            'F': { bg: 'rgba(255, 107, 107, 0.2)', progress: '#FF6B6B' },
            'G': { bg: 'rgba(78, 205, 196, 0.2)', progress: '#4ECDC4' },
            'S': { bg: 'rgba(168, 230, 207, 0.2)', progress: '#A8E6CF' }
        };

        let html = '';
        for (let i = 0; i < shifts.length; i++) {
            const shift = shifts[i];
            const colors = shiftColors[shift.shiftCode] || { bg: 'rgba(149, 165, 166, 0.2)', progress: '#95a5a6' };

            html += '<div class="shift-card" style="background: ' + colors.bg + ';">' +
                '<div class="shift-header">' +
                    '<h5 class="shift-name">' +
                        '<i class="fas fa-clock"></i> ' + shift.shiftName +
                    '</h5>' +
                    '<span class="shift-percentage">' + shift.attendancePercentage + '%</span>' +
                '</div>' +
                '<div class="shift-progress">' +
                    '<div class="shift-progress-bar" style="width: ' + shift.attendancePercentage + '%; background: ' + colors.progress + ';"></div>' +
                '</div>' +
                '<div class="shift-stats">' +
                    '<div class="shift-stat-item">' +
                        '<span class="shift-stat-value">' + shift.totalEmployees.toLocaleString() + '</span>' +
                        '<span class="shift-stat-label">Total</span>' +
                    '</div>' +
                    '<div class="shift-stat-item">' +
                        '<span class="shift-stat-value">' + shift.presentEmployees.toLocaleString() + '</span>' +
                        '<span class="shift-stat-label">Present</span>' +
                    '</div>' +
                    '<div class="shift-stat-item">' +
                        '<span class="shift-stat-value">' + shift.absentEmployees.toLocaleString() + '</span>' +
                        '<span class="shift-stat-label">Absent</span>' +
                    '</div>' +
                    '<div class="shift-stat-item">' +
                        '<span class="shift-stat-value layoff-stat">' + (shift.layoffEmployees || 0).toLocaleString() + '</span>' +
                        '<span class="shift-stat-label">Layoff</span>' +
                    '</div>' +
                '</div>' +
            '</div>';
        }

        container.innerHTML = html;
    }

    function updateQuickInsights(data) {
        const rate = data.attendancePercentage ||
            (data.totalEmployees > 0 ? Math.round((data.presentEmployees / data.totalEmployees) * 100) : 0);
        const activeEmployees = data.totalEmployees - (data.layoffEmployees || 0);

        let status = 'Excellent';
        let statusColor = 'success';

        if (rate < 70) {
            status = 'Needs Attention';
            statusColor = 'danger';
        } else if (rate < 85) {
            status = 'Good';
            statusColor = 'warning';
        }

        const insights = '<div class="info-item">' +
                '<span class="info-label">Attendance Status</span>' +
                '<span class="info-value text-' + statusColor + '">' + status + '</span>' +
            '</div>' +
            '<div class="info-item">' +
                '<span class="info-label">Today\'s Rate</span>' +
                '<span class="info-value">' + (typeof rate === 'number' ? rate.toFixed(1) : rate) + '%</span>' +
            '</div>' +
            '<div class="info-item">' +
                '<span class="info-label">Active Workforce</span>' +
                '<span class="info-value">' + activeEmployees.toLocaleString() + '</span>' +
            '</div>' +
            '<div class="info-item">' +
                '<span class="info-label">Layoff Count</span>' +
                '<span class="info-value layoff-stat">' + (data.layoffEmployees || 0).toLocaleString() + '</span>' +
            '</div>';

        document.getElementById('quickInsights').innerHTML = insights;
    }

    function refreshAttendance() {
        const refreshIcon = document.getElementById('refreshIcon');
        refreshIcon.classList.add('loading-spinner');

        fetch('/Home/RefreshAttendance', { method: 'POST' })
            .then(function(response) { return response.json(); })
            .then(function(data) {
                refreshIcon.classList.remove('loading-spinner');

                if (data.success) {
                    // Show success notification
                    showNotification('Attendance data refreshed successfully!', 'success');
                    // Reload stats
                    loadRealTimeStats();
                    loadShiftStats();
                } else {
                    showNotification('Error: ' + data.message, 'error');
                }
            })
            .catch(function(error) {
                refreshIcon.classList.remove('loading-spinner');
                showNotification('Failed to refresh data', 'error');
            });
    }

    function showNotification(message, type) {
        // Simple notification system
        const notification = document.createElement('div');
        notification.className = 'alert alert-' + (type === 'success' ? 'success' : 'danger') + ' position-fixed';
        notification.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
        notification.innerHTML = '<i class="fas fa-' + (type === 'success' ? 'check-circle' : 'exclamation-triangle') + '"></i> ' +
            message +
            '<button type="button" class="btn-close float-end" onclick="this.parentElement.remove()"></button>';

        document.body.appendChild(notification);

        // Auto-remove after 5 seconds
        setTimeout(function() {
            if (notification.parentElement) {
                notification.remove();
            }
        }, 5000);
    }

    // Cleanup on page unload
    window.addEventListener('beforeunload', function() {
        if (refreshInterval) {
            clearInterval(refreshInterval);
        }
    });
</script>